// <auto-generated />
using System;
using System.Collections.Generic;
using Forms.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Forms.Infrastructure.Migrations
{
    [DbContext(typeof(TemplateDbContext))]
    [Migration("20241002193542_UpdateTablesRefs")]
    partial class UpdateTablesRefs
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Aggregate.Template", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "Forms.Domain.TemplateManagement.Aggregate.Template.Description#Description", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Forms.Domain.TemplateManagement.Aggregate.Template.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_templates");

                    b.ToTable("templates", (string)null);
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid?>("answer_id")
                        .HasColumnType("uuid")
                        .HasColumnName("answer_id");

                    b.Property<Guid>("answers_id")
                        .HasColumnType("uuid")
                        .HasColumnName("answers_id");

                    b.ComplexProperty<Dictionary<string, object>>("AnswerValue", "Forms.Domain.TemplateManagement.Entities.Answer.AnswerValue#AnswerValue", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("answer_value_value");
                        });

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("answer_id")
                        .HasDatabaseName("ix_answers_answer_id");

                    b.HasIndex("answers_id")
                        .HasDatabaseName("ix_answers_answers_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Instance", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("respondent_id")
                        .HasColumnType("text")
                        .HasColumnName("respondent_id");

                    b.Property<Guid>("template_id")
                        .HasColumnType("uuid")
                        .HasColumnName("template_id");

                    b.HasKey("Id")
                        .HasName("pk_instances");

                    b.HasIndex("respondent_id")
                        .HasDatabaseName("ix_instances_respondent_id");

                    b.HasIndex("template_id")
                        .HasDatabaseName("ix_instances_template_id");

                    b.ToTable("instances", (string)null);
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.Property<Guid?>("templates_id")
                        .HasColumnType("uuid")
                        .HasColumnName("templates_id");

                    b.ComplexProperty<Dictionary<string, object>>("Title", "Forms.Domain.TemplateManagement.Entities.Question.Title#Title", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(120)
                                .HasColumnType("character varying(120)")
                                .HasColumnName("title");
                        });

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("templates_id")
                        .HasDatabaseName("ix_questions_templates_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<string>("Email")
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("lockout_end");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .HasColumnType("text")
                        .HasColumnName("user_name");

                    b.ComplexProperty<Dictionary<string, object>>("FullName", "Forms.Domain.TemplateManagement.Entities.User.FullName#FullName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("full_name_first_name");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasMaxLength(60)
                                .HasColumnType("character varying(60)")
                                .HasColumnName("full_name_last_name");
                        });

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Answer", b =>
                {
                    b.HasOne("Forms.Domain.TemplateManagement.Entities.Instance", null)
                        .WithMany("Answers")
                        .HasForeignKey("answer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_answers_instances_answer_id");

                    b.HasOne("Forms.Domain.TemplateManagement.Entities.Question", "Question")
                        .WithMany()
                        .HasForeignKey("answers_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_answers_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Instance", b =>
                {
                    b.HasOne("Forms.Domain.TemplateManagement.Entities.User", "Respondent")
                        .WithMany()
                        .HasForeignKey("respondent_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_instances_user_respondent_id");

                    b.HasOne("Forms.Domain.TemplateManagement.Aggregate.Template", "Template")
                        .WithMany()
                        .HasForeignKey("template_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_instances_templates_template_id");

                    b.Navigation("Respondent");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Question", b =>
                {
                    b.HasOne("Forms.Domain.TemplateManagement.Aggregate.Template", null)
                        .WithMany("Questions")
                        .HasForeignKey("templates_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_questions_templates_templates_id");
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Aggregate.Template", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("Forms.Domain.TemplateManagement.Entities.Instance", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
